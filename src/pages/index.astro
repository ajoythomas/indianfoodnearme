---
/** Astro front page: Indian Food Near Me — Pinterest x Yelp x Maps
 * Tailwind required. If you haven’t added it, run:
 *   npx astro add tailwind
 */
import '../styles/global.css';
const restaurants = [
  {
    id: "india-garden",
    name: "India Garden",
    area: "Mesquite",
    rating: 4.3,
    reviews: 1140,
    price: "$$",
    openNow: true,
    phone: "(972) 555‑0133",
    address: "4333 W Interstate 30, Mesquite, TX",
    coords: { lat: 32.8119, lng: -96.6383 },
    image: "https://images.unsplash.com/photo-1604908554007-5e3283c9bcd5?q=80&w=1200&auto=format&fit=crop",
    aiVibe: ["Casual", "Family‑friendly", "Good for groups"],
    aiSummary:
      "North Indian classics, buttery gravies, and bread game on point. Consistent service, generous portions.",
    aiLovedDishes: ["Butter Chicken", "Garlic Naan", "Paneer Tikka"],
    dietNotes: ["Vegetarian‑friendly", "Halal options"],
    tags: ["North Indian", "Tandoor", "Takeout"],
    distanceMi: 4.2,
    hoursNote: "Open • Closes 9:30 PM",
  },
  {
    id: "momos-curry-forney",
    name: "MOMO & Curry Forney",
    area: "Forney",
    rating: 4.7,
    reviews: 248,
    price: "$$",
    openNow: true,
    phone: "(469) 555‑0146",
    address: "1822 FM740, Forney, TX",
    coords: { lat: 32.7441, lng: -96.4687 },
    image: "https://images.unsplash.com/photo-1604908176997-431c5f3b8d2f?q=80&w=1200&auto=format&fit=crop",
    aiVibe: ["Cozy", "Hole‑in‑the‑wall", "Nepali‑Indian mix"],
    aiSummary:
      "Steamed & fried momos steal the show; fair spice kick. Friendly owners, small dining room.",
    aiLovedDishes: ["Chicken Momos", "Garlic Naan", "Thukpa"],
    dietNotes: ["Jain‑friendly items"],
    tags: ["Nepali", "Comfort food"],
    distanceMi: 18.1,
    hoursNote: "Open • Closes 10:30 PM",
  },
  {
    id: "the-curry-leaf",
    name: "The Curry Leaf",
    area: "Richardson",
    rating: 4.4,
    reviews: 660,
    price: "$$",
    openNow: false,
    phone: "(214) 555‑0199",
    address: "427 N Town E Blvd #102, Richardson, TX",
    coords: { lat: 32.9476, lng: -96.7297 },
    image: "https://images.unsplash.com/photo-1604908177400-a662a5a3d5e7?q=80&w=1200&auto=format&fit=crop",
    aiVibe: ["Lively", "Fast‑casual", "Weekend rush"],
    aiSummary:
      "South Indian leaning menu with super fluffy naan and properly spiced curries. Busy on weekends.",
    aiLovedDishes: ["Masala Dosa", "Goat Curry", "Biryani"],
    dietNotes: ["Vegan choices", "Gluten‑aware"],
    tags: ["South Indian", "Dosa", "Biryani"],
    distanceMi: 9.5,
    hoursNote: "Closed now • Opens 11:30 AM",
  },
  {
    id: "indian-masala-tadka",
    name: "Indian Masala Tadka",
    area: "Plano",
    rating: 4.9,
    reviews: 889,
    price: "$$",
    openNow: true,
    phone: "(469) 555‑0164",
    address: "1001 Ross Ave #100, Plano, TX",
    coords: { lat: 33.0198, lng: -96.6989 },
    image: "https://images.unsplash.com/photo-1588167056543-04038d43b1a7?q=80&w=1200&auto=format&fit=crop",
    aiVibe: ["Date‑night", "Modern", "BYOB"],
    aiSummary:
      "Refined takes on regional dishes. Balanced spice, attentive staff, strong dessert program.",
    aiLovedDishes: ["Lamb Rogan Josh", "Gulab Jamun", "Malai Kofta"],
    dietNotes: ["Vegetarian tasting menu"],
    tags: ["Modern Indian", "Desserts"],
    distanceMi: 16.3,
    hoursNote: "Open • Closes 12:00 AM",
  },
];

// Filters state (client side). Astro will render static HTML; the rest is hydrated with vanilla JS.
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Indian Food Near Me — Dallas</title>
    <meta name="description" content="Hand‑picked Indian restaurants near you. AI‑summarized vibes, most‑loved dishes, and a live map." />
    <!-- Leaflet (map) -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
      integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
      crossorigin=""
      defer
    ></script>
  </head>

  <body class="bg-neutral-50 text-neutral-900">
    <!-- Top bar -->
    <header class="sticky top-0 z-40 bg-white/80 backdrop-blur border-b border-neutral-200">
      <div class="mx-auto max-w-[1300px] px-4 py-3 flex items-center gap-3">
        <div class="flex items-center gap-2">
          <span class="inline-flex h-9 w-9 items-center justify-center rounded-xl bg-orange-100">🇮🇳</span>
          <h1 class="text-xl font-semibold">Indian Food Near Me</h1>
        </div>
        <div class="ml-auto flex-1 max-w-2xl">
          <div class="flex items-center gap-2 rounded-2xl border border-neutral-200 bg-white px-3 py-2 shadow-sm">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 opacity-60" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-4.35-4.35M11 19a8 8 0 1 1 0-16 8 8 0 0 1 0 16Z"/></svg>
            <input id="search" placeholder="Search dishes, vibes, or areas (e.g., dosa, cozy, Plano)…" class="w-full bg-transparent outline-none placeholder:text-neutral-400" />
          </div>
        </div>
        <button id="toggleMobileMap" class="md:hidden ml-2 rounded-xl border px-3 py-2 text-sm">Map</button>
      </div>
    </header>

    <!-- Main layout -->
    <main class="mx-auto max-w-[1300px] px-4 py-4 grid grid-cols-1 md:grid-cols-[280px_minmax(0,1fr)_420px] gap-4">
      <!-- Filters / Left rail -->
      <aside class="md:sticky md:top-[64px] h-max">
        <div class="rounded-2xl border border-neutral-200 bg-white p-3 shadow-sm">
          <h2 class="text-sm font-semibold mb-2"></h2>
          <div class="flex flex-wrap gap-2 mb-3">
            <button class="chip" data-chip="open">Open now</button>
            <button class="chip" data-chip="veg">Vegetarian‑friendly</button>
            <button class="chip" data-chip="halal">Halal</button>
            <button class="chip" data-chip="date">Date‑night</button>
            <button class="chip" data-chip="budget">$</button>
            <button class="chip" data-chip="mid">$$</button>
          </div>
          <div class="space-y-2">
            <label class="flex items-center justify-between text-sm">
              <span>Min rating</span>
              <input id="minRating" type="range" min="3.5" max="5" step="0.1" value="4.0" class="w-40" />
            </label>
            <div class="text-xs text-neutral-500">Showing 4.0★ and up by default.</div>
          </div>
          <hr class="my-3" />
          <div class="space-y-1">
            <h3 class="text-sm font-semibold">Picks by Review</h3>
            <div class="flex flex-wrap gap-2">
              <button class="chip" data-chip="biryani">Biryani</button>
              <button class="chip" data-chip="dosa">Dosa</button>
              <button class="chip" data-chip="tandoor">Tandoor</button>
              <button class="chip" data-chip="momos">Momos</button>
              <button class="chip" data-chip="paneer">Paneer</button>
            </div>
          </div>
        </div>
      </aside>

      <!-- Masonry feed -->
      <section id="feed" class="min-h-[60vh]">
        <div id="feedGrid" class="columns-1 sm:columns-2 xl:columns-3 gap-4 [column-fill:_balance]">
          <!-- Cards injected by script -->
        </div>
      </section>

      <!-- Map rail -->
      <aside id="mapRail" class="hidden md:block md:sticky md:top-[64px] h-[calc(100vh-80px)]">
        <div class="rounded-2xl overflow-hidden border border-neutral-200 bg-white shadow-sm h-full">
          <div id="map" class="h-full w-full"></div>
        </div>
      </aside>
    </main>

    <!-- Styles for chips & cards -->
    <style>
      @reference "tailwindcss";
      .chip {
        @apply rounded-full border border-neutral-300 bg-white px-3 py-1 text-xs hover:border-neutral-400 active:scale-[.98];
      }
      .card {
        break-inside: avoid;
      }
      .tag { @apply rounded-full bg-neutral-100 px-2.5 py-1 text-xs; }
      .badge { @apply rounded-full bg-orange-100 text-orange-900 px-2.5 py-0.5 text-[11px] font-medium; }
      .btn {
        @apply inline-flex items-center justify-center rounded-xl border border-neutral-300 px-3 py-2 text-sm hover:bg-neutral-50;
      }
      .btn-primary {
        @apply inline-flex items-center justify-center rounded-xl bg-emerald-600 text-white px-3 py-2 text-sm hover:bg-emerald-700;
      }
      .card-hover { box-shadow: 0 8px 18px rgba(0,0,0,.08); transform: translateY(-1px); }
    </style>

    <!-- Bootstrap data for client JS -->
    <script id="bootstrap-data" type="application/json">{JSON.stringify(restaurants)}</script>

    <!-- App script -->
    <script type="module">
      // Load dataset from the JSON script tag
      const seed = document.getElementById('bootstrap-data');
      const data = /** @type {any[]} */ (JSON.parse(seed?.textContent || '[]'));
      console.debug('[IFNM] dataset size:', Array.isArray(data) ? data.length : 'not-array');

      const feedGrid = document.getElementById('feedGrid');
      const search = document.getElementById('search');
      const minRating = document.getElementById('minRating');
      const mapEl = document.getElementById('map');
      const toggleMobileMap = document.getElementById('toggleMobileMap');
      const mapRail = document.getElementById('mapRail');

      // State
      let activeChips = new Set();
      let markers = {};
      let map, featureGroup;

      // Render a single card
      const cardHTML = (r) => `
        <article class="card mb-4 rounded-2xl border border-neutral-200 bg-white overflow-hidden hover:card-hover transition">
          <div class="relative">
            <img src="${r.image}" alt="${r.name}" class="w-full aspect-[16/11] object-cover" loading="lazy" />
            <div class="absolute left-3 top-3 flex gap-1">
              ${r.aiVibe.slice(0,2).map(v => `<span class="badge">${v}</span>`).join('')}
            </div>
            <button data-id="${r.id}" class="absolute right-3 top-3 btn-primary">View</button>
          </div>
          <div class="p-4 space-y-3">
            <div class="flex items-start gap-2">
              <div class="flex-1">
                <h3 class="text-lg font-semibold">${r.name}</h3>
                <div class="text-sm text-neutral-600">${r.area} • ${r.price} • <span class="font-medium">${r.rating.toFixed(1)}★</span> <span class="text-neutral-500">(${r.reviews})</span></div>
                <div class="text-xs text-emerald-700">${r.hoursNote}</div>
              </div>
              <button data-pin="${r.id}" class="btn" title="Highlight on map">📍</button>
            </div>
            <p class="text-sm leading-5">${r.aiSummary}</p>
            <div class="flex flex-wrap gap-1.5">
              ${r.aiLovedDishes.map(d => `<span class="tag">${d}</span>`).join('')}
            </div>
            <div class="flex flex-wrap gap-1.5">
              ${r.dietNotes.map(d => `<span class="tag">${d}</span>`).join('')}
            </div>
            <div class="flex gap-2 pt-1">
              <a class="btn" href="tel:${r.phone.replace(/[^0-9]/g,'')}" aria-label="Call ${r.name}">Call</a>
              <a class="btn" target="_blank" rel="noopener" href="https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(r.name+' '+r.address)}">Directions</a>
              <a class="btn" target="_blank" rel="noopener" href="https://www.google.com/search?q=${encodeURIComponent(r.name+' '+r.area)}">Reviews</a>
            </div>
          </div>
        </article>
      `;

      // Filtering logic
      function passesChip(r) {
        for (const c of activeChips) {
          if (c === 'open' && !r.openNow) return false;
          if (c === 'veg' && !r.dietNotes.join(' ').toLowerCase().includes('vegetarian')) return false;
          if (c === 'halal' && !r.dietNotes.join(' ').toLowerCase().includes('halal')) return false;
          if (c === 'date' && !r.aiVibe.join(' ').toLowerCase().includes('date')) return false;
          if (c === 'budget' && r.price !== '$') return false;
          if (c === 'mid' && r.price !== '$$') return false;
          if (['biryani','dosa','tandoor','momos','paneer'].includes(c) && ![...r.aiLovedDishes, ...r.tags].join(' ').toLowerCase().includes(c)) return false;
        }
        return true;
      }
      function passesSearch(r) {
        const q = (search.value || '').toLowerCase().trim();
        if (!q) return true;
        const hay = [r.name, r.area, r.aiSummary, r.tags.join(' '), r.aiLovedDishes.join(' '), r.aiVibe.join(' '), r.dietNotes.join(' ')].join(' ').toLowerCase();
        return hay.includes(q);
      }
      function passesRating(r) {
        return r.rating >= parseFloat(minRating.value || '3.5');
      }

      function renderFeed() {
        try {
          const items = data.filter(r => passesChip(r) && passesSearch(r) && passesRating(r))
            .sort((a,b) => b.rating - a.rating); // simple sort for now
          console.debug('[IFNM] renderFeed items:', items.length);
          if (!feedGrid) { console.error('[IFNM] feedGrid missing'); return; }
          if (items.length === 0) {
            feedGrid.innerHTML = '<div class="text-center text-sm text-neutral-500 py-8">No results match your filters.</div>';
            return;
          }
          feedGrid.innerHTML = items.map(cardHTML).join('');
          // wire hover ↔ map
          feedGrid.querySelectorAll('[data-pin]').forEach(btn => {
            btn.addEventListener('mouseenter', () => highlightMarker(btn.dataset.pin, true));
            btn.addEventListener('mouseleave', () => highlightMarker(btn.dataset.pin, false));
            btn.addEventListener('click', () => flyToMarker(btn.dataset.pin));
          });
        } catch (e) {
          console.error('[IFNM] renderFeed error:', e);
        }
      }

      // Chips
      document.querySelectorAll('.chip').forEach(ch => {
        ch.addEventListener('click', () => {
          const key = ch.dataset.chip;
          if (activeChips.has(key)) { activeChips.delete(key); ch.classList.remove('ring','ring-1','ring-emerald-500');}
          else { activeChips.add(key); ch.classList.add('ring','ring-1','ring-emerald-500'); }
          renderFeed(); refreshMarkers();
        });
      });
      search.addEventListener('input', () => { renderFeed(); refreshMarkers(); });
      minRating.addEventListener('input', () => { renderFeed(); refreshMarkers(); });

      // Map init
      function initMap() {
        map = L.map(mapEl, { scrollWheelZoom: true }).setView([32.92, -96.77], 10);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: '&copy; OpenStreetMap',
        }).addTo(map);
        featureGroup = L.featureGroup().addTo(map);
        refreshMarkers();
      }

      function refreshMarkers() {
        featureGroup.clearLayers();
        markers = {};
        const items = data.filter(r => passesChip(r) && passesSearch(r) && passesRating(r));
        items.forEach(r => {
          const m = L.marker([r.coords.lat, r.coords.lng]).addTo(featureGroup)
            .bindPopup(`<strong>${r.name}</strong><br>${r.area} • ${r.rating.toFixed(1)}★<br/><em>${r.aiLovedDishes.slice(0,2).join(', ')}</em>`);
          m.on('click', () => {
            const el = document.querySelector(\`[data-pin="\${r.id}"]\`);
            el?.scrollIntoView({ behavior: 'smooth', block: 'center' });
            highlightCard(r.id);
          });
          markers[r.id] = m;
        });
        if (items.length) map.fitBounds(featureGroup.getBounds(), { padding: [30,30] });
      }

      function highlightMarker(id, on=true) {
        const m = markers[id]; if (!m) return;
        m.setZIndexOffset(on ? 1000 : 0);
        m.setIcon(on
          ? new L.Icon.Default({ className: 'leaflet-marker-icon leaflet-zoom-animated leaflet-interactive ring-4 ring-emerald-400 rounded-full' })
          : new L.Icon.Default());
      }
      function flyToMarker(id) {
        const r = data.find(x => x.id === id); if (!r) return;
        map.flyTo([r.coords.lat, r.coords.lng], 14, { duration: .6 });
        markers[id]?.openPopup();
        highlightCard(id);
      }
      function highlightCard(id) {
        const btn = document.querySelector(\`[data-pin="\${id}"]\`);
        const card = btn?.closest('.card');
        if (!card) return;
        card.classList.add('ring','ring-2','ring-emerald-500');
        setTimeout(() => card.classList.remove('ring','ring-2','ring-emerald-500'), 1200);
      }

      // Mobile map toggle
      toggleMobileMap?.addEventListener('click', () => {
        const isHidden = mapRail.classList.contains('hidden');
        if (isHidden) {
          mapRail.classList.remove('hidden');
          mapRail.classList.add('fixed','inset-0','z-50','p-4','bg-white');
          mapEl.style.height = 'calc(100vh - 2rem)';
          if (!map) setTimeout(initMap, 0); else setTimeout(() => map.invalidateSize(), 0);
          toggleMobileMap.textContent = 'Close Map';
        } else {
          mapRail.classList.add('hidden');
          mapRail.classList.remove('fixed','inset-0','z-50','p-4','bg-white');
          toggleMobileMap.textContent = 'Map';
        }
      });

      // Initial render
      renderFeed();
      if (mapEl) {
        window.addEventListener('load', () => {
          try { initMap(); } catch (err) { console.error('Map init failed:', err); }
        });
      }
    </script>
  </body>
</html>
